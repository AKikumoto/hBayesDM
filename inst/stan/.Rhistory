matplot(sv_all[1,], type = "b", pch=1)
matplot(sv_all[1,], type = "b", pch=1, col=1:4)
graphics.off()
dat <- matrix(runif(40,1,20),ncol=4) # make data
matplot(dat, type = c("b"),pch=1,col = 1:4) #plot
dim(dat)
head(dat)
dim(sv_all)
class(output)
class(output$modelRegressor)
install.packages("hBayesDM", dependencies = T)
library(hBayesDM)
library(rstan)
rstan.package.skeleton()
?rstan.package.skeleton
library(cranlogs)
?cran_top_downloads
cran_top_downloads()
cran_top_downloads(count=100)
cran_downloads(packages = c("hBayesDM", "rstan"), when="last_month")
cran_downloads(packages = c("hBayesDM", "rstan"), when="last-month")
cran_downloads(packages = c("hBayesDM", "rstanarm"), when="last-month")
output=cran_downloads(packages = c("hBayesDM", "rstanarm"), when="last-month")
dim(output)
output=cran_downloads(from = "03-15-2016", to="06-20-2016", packages = c("hBayesDM"))
output=cran_downloads(from = "2016-03-15", to="2016-06-20", packages = c("hBayesDM"))
output
plot(output$count)
plot(output$count, type="l")
output=cran_downloads(from = "2016-03-15", to="2016-07-20", packages = c("hBayesDM"))
plot(output$count, type="l")
plot(output$count, type="l", xlab=output$date)
output$date
class(output$date)
plot(output$count, type="l", xlab=as.character(output$date))
as.character(output$date)
output
library(cranlogs)
?cranlogs
cran_downloads("hBayesDM", "last-week")
install.packages("hBayesDM
")
install.packages("hBayesDM")
library(hBayesDM)
output=dd_cs("example", 1000,500)
plot(output)
printFit(output)
graphics.off()
output=ra_noRA("example", 1000,500)
print(output)
plot(output)
graphics.off()
printFit(output)
source('~/Dropbox/Voon_modeling/R/PG.R')
nd=1, ng=1
nd=1; ng=1
PG(0.8, nd, ng)
PG = function(q, nd, ng)  { #        %equation 3; P(G/number of draws nd, and number of green draws ng)
p = 1/(1 + (q/(1-q))^(nd-2*ng));
return(p)
}
nd=1; ng=1
PG(0.8, nd, ng)
nd=2; ng=1
PG(0.8, nd, ng)
rstan:::rstudio_stanc("Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDMdev/inst/stan/igt_persV2_bfc_v0.stan")
library(cranlogs)
?cran_downloads
cran_downloads("hBayesDM", "last-month")
cran_downloads("RWiener", "last-month")
cran_downloads("rstan", "last-month")
install.packages("hBayesDM")
library(hBayesDM)
output = igt_pvl_delta("example")
PG_seq = function(q, Seq)  { #        %equation 3; P(G/number of draws nd, and number of green draws ng)
# PG code that uses a sequence on each trial
# e.g., seq = c(0, 1, 0, 0)
p = 1/(1 + (q/(1-q))^(nd-2*ng));
return(p)
}
nd=2; ng=1
PG(0.8, nd, ng)
library(hBayesDM)
output = gng_m1()
library(hBayesDM)
output5b = gng_m5b("example", 2000, 1000, 2, 2)
3+5
output5b = gng_m5b("example", 2000, 1000, 2, 2)
output5b = gng_m5b("example", 2000, 1000, 2, 2, inits = "random")
output5b$fit
printFit(output5b)
output5 = gng_m5("example", 2000, 1000, 2, 2, inits = "random")
output5$allIndPars
output5b$allIndPars
library(hBayesDM)
output5b = gng_m5b("example", 2000, 1000, 2, 2)
output5b$fit
quartz(); plot(output5b)
stan_plot(output5b$fit, "piRew", show_density=T)
stan_plot(output5b$fit, "piPun", show_density=T)
stan_plot(output5b$fit, "rhoPun", show_density=T)
stan_plot(output5b$fit, "rhoRew", show_density=T)
stan_plot(output5b$fit, "xi", show_density=T)
library(hBayesDM)
plotInd()
output = prl_fictitious("example", 2000, 1000, 2, 2)
plot(output)
output$fit
output$allIndPars
plotInd(output, "eta")
plotInd(output, "beta")
printFit(output)
plotInd(output, "alpha")
library(hBayesDM)
output = choiceRT_wiener_single("example")
rstan:::rstudio_stanc("Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDMdev/inst/stan/choiceRT_wiener.stan")
igt_final_model_centeredK
library(hBayseDM)
library(hBayesDM)
output = choiceRT_wiener_single("example")
library(hBayesDM)
output = igt_ahn_test1("fridberg", 2000, 1000, 2, 2)
output$model
rstan:::rstudio_stanc("Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDMdev/inst/stan/igt_final_model_Afreq_nateEdit.stan")
library(hBayesDM)
output = bandit4arm_seymour("example", 2000, 1000, 2, 2)
library(hBayesDM)
output = bandit4arm_seymour("example", 1000, 500, 1, 1)
library(hBayesDM)
output4 = bandit4arm_seymour_woC("example", 1500, 500)
library(hBayesDM)
output4 = bandit4arm_seymour_woC("example", 1500, 500)
quartz(); traceplot(output$fit)
quartz(); traceplot(output4$fit)
plotInd(output4, "Arew")
plotInd(output4, "Apun")
plotInd(output4, "R")
plotInd(output4, "P")
rstan:::rstudio_stanc("Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM_0_2_3_gng_m5/inst/stan/bandit4arm_seymour_wXi.stan")
source('~/Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM_0_2_3_gng_m5/R/bandit4arm_seymour_wXi.R')
printFit(output4)
library(hBayesDM)
outputXi = bandit4arm_seymour_wXi("example", 1500, 500)
outputXi$fit
quartz(); traceplot(outputXi$fit)
printFit(outputXi)
plotInd(output4, "Arew")
plotInd(outputXi, "Arew")
plotInd(outputXi, "APun")
plotInd(outputXi, "Apun")
plotInd(outputXi, "R")
plotInd(outputXi, "P")
plotInd(outputXi, "xi")
library(hBayesDM)
output4 = bandit4arm_seymour_woC("example", 1500, 500, 2, 2)
quartz(); traceplot(output4$fit)
plotHDI(output4$parVals$mu_Arew)
plotHDI(output4$parVals$mu_Apun)
plotHDI(output4$parVals$mu_R)
plotHDI(output4$parVals$mu_P)
plotInd(output, "P")
plotInd(output4, "P")
printFit(output4)
output5 = bandit4arm_seymour("example", 1500, 500, 2, 2)
output5$fit
printFit(output4, output5)
quartz(); traceplot(output5$fit)
fridData =  "~/Dropbox/CCSL/R_Package_Project/Data/Fridberg2010/Porrino_Control.txt"
output_frid = bandit4arm_seymour_woC(fridData, 2000, 1000, 2, 2)
graphics.off()
quartz(); traceplot(output_frid)
quartz(); traceplot(output_frid$fit)
printFit(output_frid)
ls()
source('~/Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM_0_2_3_gng_m5/inst/plotting/plot_functions.R')
plot_bandit4arm_seymour_woC(output4)
plot_bandit4arm_seymour(output5)
output5$model
quartz(); plot_bandit4arm_seymour_wXi(output5)
quartz(); plot_bandit4arm_seymour(output5)
source('~/Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM_0_2_3_gng_m5/inst/plotting/plot_functions.R')
quartz(); plot_bandit4arm_seymour(output5)
source('~/Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM_0_2_3_gng_m5/inst/plotting/plot_functions.R')
plot_bandit4arm_seymour(output5)
source('~/Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM_0_2_3_gng_m5/inst/plotting/plot_functions.R')
plot_bandit4arm_seymour_woC(output4)
source('~/Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM_0_2_3_gng_m5/inst/plotting/plot_functions.R')
library(hBayesDM)
output =bandit4arm_seymour_woC("example", 1000, 500, 1, 1)
plot(output)
quartz(); traceplot(output$fit)
plotInd(output, "Arew")
plotInd(output, "Apun")
plotInd(output, "R")
plotInd(output, "P")
library(hBayesDM)
output =bandit4arm_seymour_woC("example", 1000, 500, 1, 1)
plot(output)
quartz(); plot(output)
output$fit
plotInd(output, "Arew")
plotInd(output, "Apun")
plotInd(output, "R")
plotInd(output, "P")
graphics.off()
library(ggplot2)
install.packages("hBayesDM")
library(hBayesDM)
output_ewa = prl_ewa("example", 1000, 500, 1, 1)
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
library(hBayesDM)
prlHN = "/Users/wahn/Dropbox/Research/dissertation/dataFile/PRL/PRL_HN_hBayesDM_Feb2012.txt"
outputHN = prl_fictitious_multipleB(prlHN, 1000, 500, 2, 2)
prlHN
rawdata = read.table(prlHN, header=T)
# Individual Subjects
subjList <- unique(rawdata[,"subjID"])  # list of subjects x blocks
numSubjs <- length(subjList)  # number of subjects
# Specify the number of parameters and parameters of interest
numPars <- 3
POI     <- c("mu_eta", "mu_alpha", "mu_beta",
"sd_eta", "sd_alpha", "sd_beta",
"eta", "alpha", "beta",
"log_lik")
modelName <- "prl_fictitious_multipleB"
maxB = length(unique(rawdata$block))  # maximum number of block
B = NULL  # number of blocks for each subject
#Tsubj <- as.vector( rep( 0, numSubjs ) ) # number of trials for each subject
Tsubj <- array(0, c(numSubjs, maxB) ) # number of trials for each subject, in each block
B
for ( i in 1:numSubjs )  {
curSubj  <- subjList[ i ]
tmpDat = subset(rawdata, subjID == curSubj)
tmpAllBlocks = unique( tmpDat$block ) # temp. subject's all blocks
B[i] = length(tmpAllBlocks)
for (bIdx in 1:B[i]) {
Tsubj[i, bIdx] = sum( tmpDat$block == tmpAllBlocks[bIdx] )
}
Tsubj
maxTrials <- max(Tsubj)
choice <- array(1, c(numSubjs, maxB, maxTrials) )
rewlos <- array(0, c(numSubjs, maxB, maxTrials) )
for (i in 1:numSubjs) {
curSubj      <- subjList[i]
tmpDat = subset(rawdata, subjID == curSubj)
tmpAllBlocks = unique( tmpDat$block ) # temp. subject's all blocks
for (bIdx in 1:B[i]) {
tmp = subset(tmpDat, block == tmpAllBlocks[bIdx])
useTrials <- Tsubj[i, bIdx]
choice[i, bIdx, 1:useTrials] <- tmp$choice
rewlos[i, bIdx, 1:useTrials] <- tmp$rewlos
}
dim(B)
B
Tsubj
dim(Tsubj)
rewlos[38,,]
Tsubj
data <- system.file("extdata", "gng_m4_exampleData.txt", package = "hBayesDM")
rawdata2=read.table(data, header=T)
data
library(hBayesDM)
data <- system.file("extdata", "gng_m4_exampleData.txt", package = "hBayesDM")
data
data <- system.file("extdata", "gng_m4_exampleData.txt", package = "hBayesDM")
data
library(hBayesDM)
prlHN = "/Users/wahn/Dropbox/Research/dissertation/dataFile/PRL/PRL_HN_hBayesDM_sample.txt"
outputHN = prl_fictitious_multipleB(prlHN, 1000, 500, 2, 2, inits = "fixed")
output = prl_fictitious("example", 1000, 500, 1,1)
install.packages("hBayesDM", dependencies = T)
library(hBayesDM)
prlHN = "/Users/wahn/Dropbox/Research/dissertation/dataFile/PRL/PRL_HN_hBayesDM_sample.txt"
library(hBayesDM)
outputHN = prl_fictitious_multipleB(prlHN, 1000, 500, 2, 2, inits = "fixed")
install.packages("tensorflow")
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
sess = tf$Session()
hello <- tf$constant('Hello, TensorFlow!')
sess$run(hello)
library(glmnet)
?cv.glmnet
library(cranlogs)
cran_downloads("hBayesDM", "last-month")
library(devtools)
install_github("CCS-Lab/hBayesDM", subdir="hBayesDM")
library(hBayesDM)
?glmnet
library(glmnet)
?cv.glmnet()
?cv.glmnet
library(hBayesDM)
output = choiceRT_wiener_single("example", 1000, 500)
plot(output)
printFit(output)
install_github("CCS-Lab/hBayesDM-dev")
library(devtools)
install_github("CCS-Lab/hBayesDM-dev")
choiceRT_wiener_single
library(glmnet)
?glmnet
library(devtools)
install_github("CCS-Lab/hBayesDM_VV", auth_token="7e6d613e3ad4e2280601433a7ff3f89046aa40a8")
library(hBayesDM)
output = beads_1par("HC", 2000, 1000, 2, 2)
plot(output)
traceplot(output$fit)
traceplot(output$fit, inc_warmup=T)
plotInd(output, "theta")
output2 = beads_2par("HC", 2000, 1000, 2, 2)
output2$fit
printF(output, output2)
printFit(output, output2)
plotInd(output2, "theta")
plotInd(output2, "xi")
pk2 = beads_2par("PK", 2000, 1000, 2, 2)
pk2$fit
plotInd(pk2, "theta")
plotInd(pk2, "xi")
devtools::install_github("CCS-Lab/easyml", subdir = "R")
library(easyml)
data("cocaine", package = "easyml")
easy_glmnet(data = cocaine, dependent_variable = "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"))
ls()
cocaine
head(cocaine)
easy_glmnet(data = cocaine, dependent_variable = "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"))
easy_glmnet(data = cocaine, dependent_variable = "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"))
?easy_glmnet
output = easy_glmnet(data = cocaine, dependent_variable = "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"))
process_data
?process_data
output = easy_glmnet(data = cocaine, dependent_variable = "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"))
easy_glmnet(data = cocaine, dependent_variable = "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"))
easy_glmnet(.data = cocaine, dependent_variable = "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"))
devtools::install_github("CCS-Lab/easyml", subdir = "R")
library(easyml)
?easy_glmnet
data("prostate", package = "easyml")
easy_glmnet(prostate, "lpsa")
data("cocaine_dependence", package = "easyml")
easy_glmnet(cocaine_dependence, "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"),
categorical_variables = c("Male"))
?dplyr
library(dplyr)
?filter
library(glmnet)
?glmne
?glmnet
?cv.glmnet
library(hBayesDM)
gng_m1()
devtools::install_github("CCS-Lab/easyml", subdir = "R")
library(easyml)
data("prostate", package = "easyml")
easy_glmnet(prostate, "lpsa")
?easy_glmnet
data("prostate", package = "easyml")
easy_glmnet(prostate, "lpsa", n_samples = 100, n_divisions = 100, progress_bar = T)
output = easy_glmnet(prostate, "lpsa", n_samples = 10, n_divisions = 10, progress_bar = T)
output
data("cocaine_dependence", package = "easyml")
easy_glmnet(cocaine_dependence, "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"),
categorical_variables = c("Male"), n_divisions = 10, n_samples = 10)
data("cocaine_dependence", package = "easyml")
easy_glmnet(cocaine_dependence, "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"),
categorical_variables = c("Male"), n_divisions = 10, n_samples = 10)
data("cocaine_dependence", package = "easyml")
easy_glmnet(cocaine_dependence, "DIAGNOSIS",
family = "binomial", exclude_variables = c("subject", "AGE"),
categorical_variables = c("Male"), n_divisions = 10, n_samples = 10, progress_bar = T, parallel = T)
devtools::install_github("CCS-Lab/easyml", subdir = "R")
library(easyml)
data("prostate", package = "easyml")
easy_glmnet(prostate, "lpsa")
library(easyml) # https://github.com/CCS-Lab/easyml
# Load data
data("prostate", package = "easyml")
# Analyze data
system.time(easy_glmnet(prostate, "lpsa",
n_samples = 100, n_divisions = 100, n_iterations = 10,
random_state = 1, n_core = 3)
)
getwd()
library(hBayesDM)
gng_m1
?stan
?dd_cs
?stan
library(hBayesDM)
ug_delta()
ug_delta
library(stan)
library(rstan)
library(cranlogs)
cran_downloads("hBayesDM", "last-month")
down1 = cran_downloads("hBayesDM", "last-month")
down2 = cran_downloads("rtdists", "last-month")
down2
head(down2)
plot(down1$count); lines(down2$count)
plot(down1$count, type="l", col="blue"); lines(down2$count)
down3 = cran_downloads("rwiener", "last-month")
plot(down1$count, type="l", col="blue"); lines(down2$count); lines(down3$count, col="red")
down3 = cran_downloads("RWiener", "last-month")
plot(down1$count, type="l", col="blue"); lines(down2$count); lines(down3$count, col="red")
graphics.off()
install.packages("shiny")
shiny::runGitHub("shiny-phyloseq","joey711")
install.packages("phyloseq")
source('http://bioconductor.org/biocLite.R')
biocLite('phyloseq')
install.packages("shiny")
shiny::runGitHub("shiny-phyloseq","joey711")
install.packages("shiny")
shiny::runGitHub("shiny-phyloseq","joey711")
biocLite('phyloseq')
install.packages("Hmisc")
shiny::runGitHub("shiny-phyloseq","joey711")
biocLite('networkD3')
shiny::runGitHub("shiny-phyloseq","joey711")
?biocLite
biocLite('networkD3')
shiny::runGitHub("shiny-phyloseq","joey711")
biocLite('genefilter')
shiny::runGitHub("shiny-phyloseq","joey711")
install.packages("RcppOctave")
library(rstan)
library(hBayesDM)
output_m2 = gng_m2("example", 2000, 1000, 2, 2)
output_m2
output_m2$fit
output_m2_wide = output_m2
load("/Users/wahn/Desktop/gng_m2.RData")
ls()
output_gng2
output_m2
ls()
all_wide = output_m2_wide$allIndPars
plot(output_m2)
plot(output_gng2)
all = output_gng2$allIndPars
all[1:5,]
all_wide[1:5,]
plot(all$xi, all_wide$xi)
plot(all$xi, all_wide$xi); abline(0,1)
all1[1:2,]
all[1:2,]
plot(all$ep, all_wide$ep); abline(0,1)
plot(all$b, all_wide$b); abline(0,1)
plot(all$rho, all_wide$rho); abline(0,1)
rstan:::rstudio_stanc("Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM/inst/stan/gng_m3.stan")
rstan:::rstudio_stanc("Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM/inst/stan/gng_m4.stan")
rstan:::rstudio_stanc("Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM/inst/stan/igt_vpp.stan")
devtools::install_github("CCS-Lab/easyml", subdir = "R")
remove.packages("rstan")
remove.packages("hBayesDM")
devtools::install_github("CCS-Lab/hBayesDM")
library(hBayesDM)
output = igt_vpp("example", 1000, 500, 1, 1)
plot(output)
output$fit
devtools::install_github("CCS-Lab/hBayesDM")
library(hBayesDM)
devtools::install_github("CCS-Lab/hBayesDM")
library(hBayesDM)
library(devtools)
?install_github
library(hBayesDM)
output = prl_rp("example", 2000, 1000, 2, 2)
rhat(output)
fit=output
rhatData <- data.frame(Rhat = summary(fit$fit)$summary[,"Rhat"])
rm(rhat)
rhat(output)
summary(output$fit)
woo = summary(output$fit)
woo[, "Rhat"]
woo
woo[1:4,]
output$fit
woo=output$fit
summary(woo)
stan_rhat(output$fit)
?stan_rhat
woo=summary(output$fit)
woo2=woo$summary[, "Rhat"]
woo2
summaryData <- summary(fit$fit)
fit = output
summaryData <- summary(fit$fit)
rhatData <- data.frame(Rhat = summaryData$summary[, "Rhat"])
rhatData
source('~/Dropbox/CCSL/R_Package_Project/Package_Build/hBayesDM/R/rhat.R')
install.packages("rstan", dependencies = T)
